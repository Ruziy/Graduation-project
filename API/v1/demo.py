from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from enum import Enum
from typing import Literal
from fastapi.templating import Jinja2Templates
import uvicorn

app = FastAPI(title="üß† –£–º–Ω—ã–π API: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞, –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏ —Å—Ç–∞—Ç–∏–∫—É
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
class ModeEnum(int, Enum):
    calibrate = 1
    optimize = 2
    select_model = 3

# –ó–∞–ø—Ä–æ—Å—ã
class ModeRequest(BaseModel):
    mode: ModeEnum

class ModelChoice(BaseModel):
    model_name: Literal["Model A", "Model B", "Model C"]

selected_model = {"current": None}

@app.get("/", response_class=HTMLResponse)
def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "current_model": selected_model["current"]})

@app.post("/run-mode-ui")
def run_mode_ui(request: Request, mode: int = Form(...)):
    if mode == 1:
        result = {"status": "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"}
    elif mode == 2:
        result = {"status": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"}
    elif mode == 3:
        result = {
            "status": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /select-model/",
            "available_models": ["Model A", "Model B", "Model C"]
        }
    else:
        result = {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º"}

    return templates.TemplateResponse("index.html", {
        "request": request,
        "result": result,
        "current_model": selected_model["current"]
    })

@app.post("/select-model-ui")
def select_model_ui(request: Request, model_name: str = Form(...)):
    selected_model["current"] = model_name
    result = {"selected_model": model_name, "status": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞"}

    return templates.TemplateResponse("index.html", {
        "request": request,
        "result": result,
        "current_model": selected_model["current"]
    })

if __name__ == "__main__":
    uvicorn.run("main:app", reload=True)