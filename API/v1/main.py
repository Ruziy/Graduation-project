from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from enum import Enum
from typing import Literal
from fastapi.templating import Jinja2Templates
import uvicorn
import subprocess
from ultralytics.utils import LOGGER
import logging

# –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ –Ω–∏–∂–µ ERROR
LOGGER.setLevel(logging.ERROR)

app = FastAPI(title="üß† –£–º–Ω—ã–π API: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞, –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏ —Å—Ç–∞—Ç–∏–∫—É
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

import re

def run_calibration_script(model="yolov8", fps_threshold=10.0, cpu_threshold=50.0):
    try:
        result = subprocess.run(
            [
                "python", "mecho_algo_V2.py",
                "--model", model,
                "--fps_threshold", str(fps_threshold),
                "--cpu_threshold", str(cpu_threshold)
            ],
            capture_output=True,
            text=True,
            check=True
        )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π
        output_lines = result.stdout.splitlines()
        calibration_lines = []
        in_block = False
        for line in output_lines:
            if re.match(r"=+", line):
                in_block = not in_block
                calibration_lines.append(line)
            elif in_block or "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in line or "–°—Ä–µ–¥–Ω–∏–π FPS" in line or "–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU" in line or "–Ω–∞–≥—Ä—É–∑–∫–∞" in line or "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" in line:
                calibration_lines.append(line)

        filtered_output = "\n".join(calibration_lines)
        return {"status": "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "output": filtered_output}

    except subprocess.CalledProcessError as e:
        return {"status": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞", "error": e.stderr}



# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
class ModeEnum(int, Enum):
    calibrate = 1
    optimize = 2
    select_model = 3

# –ó–∞–ø—Ä–æ—Å—ã
class ModeRequest(BaseModel):
    mode: ModeEnum

class ModelChoice(BaseModel):
    model_name: Literal["Model A", "Model B", "Model C"]

selected_model = {"current": None}

@app.get("/", response_class=HTMLResponse)
def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request, "current_model": selected_model["current"]})

@app.post("/run-mode-ui")
def run_mode_ui(request: Request, mode: int = Form(...)):
    if mode == 1:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model = "yolov8"
        fps_threshold = 10.0
        cpu_threshold = 50.0
        result = run_calibration_script(model, fps_threshold, cpu_threshold)
    elif mode == 2:
        result = {"status": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"}
    elif mode == 3:
        result = {
            "status": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /select-model/",
            "available_models": ["Model A", "Model B", "Model C"]
        }
    else:
        result = {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º"}

    return templates.TemplateResponse("index.html", {
        "request": request,
        "result": result,
        "current_model": selected_model["current"]
    })

@app.post("/select-model-ui")
def select_model_ui(request: Request, model_name: str = Form(...)):
    selected_model["current"] = model_name
    result = {"selected_model": model_name, "status": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞"}

    return templates.TemplateResponse("index.html", {
        "request": request,
        "result": result,
        "current_model": selected_model["current"]
    })

if __name__ == "__main__":
    uvicorn.run("main:app", reload=True)